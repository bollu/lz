{-# OPTIONS -fno-spec-constr-count #-}
module Main where
import Gauge.Main
import GenGraph
import Data.Vector.Unboxed as V
import Data.Word
import System.Random.Stateful
import Data.Binary
import Data.Vector.Binary
import Data.Binary.Put
import qualified Data.ByteString.Lazy as B

starCheck :: Vector Int -> Vector Bool
starCheck ds = V.backpermute st' gs
  where
    gs  = V.backpermute ds ds
    st  = V.zipWith (==) ds gs
    st' = V.update st . V.filter (not . snd)
                      $ V.zip gs st

concomp :: Vector Int -> Vector Int -> Vector Int -> Vector Int
concomp ds es1 es2
  | V.and (starCheck ds'') = ds''
  | otherwise              = concomp (V.backpermute ds'' ds'') es1 es2
  where
    ds'  = V.update ds
         . V.map (\(di, dj, gi) -> (di, dj))
         . V.filter (\(di, dj, gi) -> gi == di && di > dj)
         $ V.zip3 (V.backpermute ds es1)
                  (V.backpermute ds es2)
                  (V.backpermute ds (V.backpermute ds es1))

    ds'' = V.update ds'
         . V.map (\(di, dj, st) -> (di, dj))
         . V.filter (\(di, dj, st) -> st && di /= dj)
         $ V.zip3 (V.backpermute ds' es1)
                  (V.backpermute ds' es2)
                  (V.backpermute (starCheck ds') es1)

concompDebug :: Vector Int -> Vector Int -> Vector Int -> IO (Vector Int)
concompDebug ds es1 es2 = do
  putStrLn $ "##concompDebug##"
  putStrLn $ "ds: " <> show ds
  let ds'  = V.update ds
         . V.map (\(di, dj, gi) -> (di, dj))
         . V.filter (\(di, dj, gi) -> gi == di && di > dj)
         $ V.zip3 (V.backpermute ds es1)
                  (V.backpermute ds es2)
                  (V.backpermute ds (V.backpermute ds es1))
  putStrLn $ "ds': " <> show ds'

  let ds'' = V.update ds'
         . V.map (\(di, dj, st) -> (di, dj))
         . V.filter (\(di, dj, st) -> st && di /= dj)
         $ V.zip3 (V.backpermute ds' es1)
                  (V.backpermute ds' es2)
                  (V.backpermute (starCheck ds') es1)

  if V.and (starCheck ds'')
  then return ds''
  else concompDebug (V.backpermute ds'' ds'') es1 es2


awshcc :: (Int, Vector Int, Vector Int) -> Vector Int
{-# NOINLINE awshcc #-}
awshcc (n, es1, es2) = concomp ds es1' es2'
    where
      ds = V.enumFromTo 0 (n-1) V.++ V.enumFromTo 0 (n-1)
      es1' = es1 V.++ es2
      es2' = es2 V.++ es1

awshccDebug :: (Int, Vector Int, Vector Int) -> IO (Vector Int)
awshccDebug (n, es1, es2) = do
    let ds = V.enumFromTo 0 (n-1) V.++ V.enumFromTo 0 (n-1)
    let es1' = es1 V.++ es2
    let es2' = es2 V.++ es1
    concompDebug ds es1' es2'


encodeVecDoubleToFile :: String -> Vector Double -> IO ()
encodeVecDoubleToFile f vs = 
  B.writeFile f $ runPut $ (genericPutVectorWith (putInt32le . fromIntegral) putDoublele vs)

encodeVecInt32ToFile :: String -> Vector Int -> IO ()
encodeVecInt32ToFile f vs = 
  B.writeFile f $ runPut $ (genericPutVectorWith (putInt32le . fromIntegral) (putInt32le . fromIntegral) vs)


useSize :: Int
useSize = 220

useSeed :: Int
useSeed = 42

main :: IO ()
main = do
  gen <- newIOGenM (mkStdGen useSeed)
  (nodes, edges1, edges2) <- randomGraph gen useSize
  nodes `seq` edges1 `seq` edges2 `seq` return ()
  encodeVecInt32ToFile "nodes.bin" (V.singleton nodes)
  encodeVecInt32ToFile "edges1.bin" edges1
  encodeVecInt32ToFile "edges2.bin" edges2


  defaultMain $ [bench "awshcc" $ whnf awshcc (nodes, edges1, edges2)]

  out <- awshccDebug (nodes, edges1, edges2)
  encodeVecInt32ToFile "out-hs.bin" out
