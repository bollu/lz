
[init]
def make.match_1._rarg (x_1 : obj) (x_2 : obj) (x_3 : obj) : obj :=
  let x_4 : obj := 0;
  let x_5 : u8 := Nat.decEq x_1 x_4;
  case x_5 : obj of
  Bool.false →
    let x_6 : obj := app x_3 x_1;
    ret x_6
  Bool.true →
    let x_7 : obj := ctor_0[PUnit.unit];
    let x_8 : obj := app x_2 x_7;
    ret x_8
def make.match_1 (x_1 : ◾) : obj :=
  let x_2 : obj := pap make.match_1._rarg;
  ret x_2
[init]
def mapTree.match_1._rarg (x_1 : obj) (x_2 : obj) (x_3 : obj) (x_4 : obj) : obj :=
  case x_2 : obj of
  Tree.Nil →
    let x_5 : obj := app x_3 x_1;
    ret x_5
  Tree.Node →
    let x_6 : obj := proj[0] x_2;
    let x_7 : obj := proj[1] x_2;
    let x_8 : obj := proj[2] x_2;
    let x_9 : obj := app x_4 x_1 x_6 x_7 x_8;
    ret x_9
def mapTree.match_1 (x_1 : ◾) : obj :=
  let x_2 : obj := pap mapTree.match_1._rarg;
  ret x_2
[init]
def mapTree (x_1 : obj) (x_2 : obj) : obj :=
  case x_2 : obj of
  Tree.Nil →
    let x_3 : obj := ctor_0[Tree.Nil];
    ret x_3
  Tree.Node →
    let x_4 : obj := proj[0] x_2;
    let x_5 : obj := proj[1] x_2;
    let x_6 : obj := proj[2] x_2;
    let x_7 : obj := app x_1 x_4;
    let x_8 : obj := mapTree x_1 x_5;
    let x_9 : obj := mapTree x_1 x_6;
    let x_10 : obj := ctor_1[Tree.Node] x_7 x_8 x_9;
    ret x_10/home/bollu/work/mlir/lambdapure/tests/bench/treemap.lean:9:7: error: unknown identifier 'Leaf'
/home/bollu/work/mlir/lambdapure/tests/bench/treemap.lean:8:0: error: failed to compile partial definition 'make', failed to show that type is inhabited
