

def swap._main (x_1 : obj) : obj :=
  case x_1 : obj of
  Tree.Nil →
    ret x_1
  Tree.Node →
    let x_2 : obj := proj[0] x_1;
    let x_3 : obj := proj[1] x_1;
    let x_4 : obj := swap._main x_3;
    let x_5 : obj := swap._main x_2;
    let x_6 : obj := ctor_1[Tree.Node] x_4 x_5;
    ret x_6
  Tree.Node1 →
    ret x_1

def swap (x_1 : obj) : obj :=
  let x_2 : obj := swap._main x_1;
  ret x_2

def cut._main (x_1 : obj) : obj :=
  case x_1 : obj of
  Tree.Nil →
    ret x_1
  Tree.Node →
    let x_2 : obj := proj[0] x_1;
    let x_3 : obj := cut._main x_2;
    let x_4 : obj := ctor_2[Tree.Node1] x_3;
    ret x_4
  Tree.Node1 →
    ret x_1

def cut (x_1 : obj) : obj :=
  let x_2 : obj := cut._main x_1;
  ret x_2