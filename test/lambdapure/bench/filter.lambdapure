

def filter._main (x_1 : obj) : obj :=
  case x_1 : obj of
  L.Nil →
    ret x_1
  L.Cons →
    let x_2 : obj := proj[0] x_1;
    let x_3 : obj := proj[1] x_1;
    let x_4 : obj := 5;
    let x_5 : u8 := Nat.decLt x_4 x_2;
    case x_5 : obj of
    Bool.false →
      let x_6 : obj := filter._main x_3;
      let x_7 : obj := ctor_1[L.Cons] x_2 x_6;
      ret x_7
    Bool.true →
      let x_8 : obj := filter._main x_3;
      ret x_8

def filter (x_1 : obj) : obj :=
  let x_2 : obj := filter._main x_1;
  ret x_2