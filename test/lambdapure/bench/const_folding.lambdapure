

def mkExpr._main._closed_1 : obj :=
  let x_1 : obj := 1;
  let x_2 : obj := ctor_0[Expr.Var] x_1;
  ret x_2
def mkExpr._main (x_1 : obj) (x_2 : obj) : obj :=
  let x_3 : obj := 0;
  let x_4 : u8 := Nat.decEq x_1 x_3;
  case x_4 : obj of
  Bool.false →
    let x_5 : obj := 1;
    let x_6 : obj := Nat.sub x_1 x_5;
    let x_7 : obj := Nat.add x_2 x_5;
    let x_8 : obj := mkExpr._main x_6 x_7;
    let x_9 : obj := Nat.sub x_2 x_5;
    let x_10 : obj := mkExpr._main x_6 x_9;
    let x_11 : obj := ctor_2[Expr.Add] x_8 x_10;
    ret x_11
  Bool.true →
    let x_12 : u8 := Nat.decEq x_2 x_3;
    case x_12 : obj of
    Bool.false →
      let x_13 : obj := ctor_1[Expr.Val] x_2;
      ret x_13
    Bool.true →
      let x_14 : obj := mkExpr._main._closed_1;
      ret x_14

def mkExpr (x_1 : obj) (x_2 : obj) : obj :=
  let x_3 : obj := mkExpr._main x_1 x_2;
  ret x_3

def appendAdd._main (x_1 : obj) (x_2 : obj) : obj :=
  case x_1 : obj of
  Expr.Var →
    let x_3 : obj := ctor_2[Expr.Add] x_1 x_2;
    ret x_3
  Expr.Val →
    let x_4 : obj := ctor_2[Expr.Add] x_1 x_2;
    ret x_4
  Expr.Add →
    let x_5 : obj := proj[0] x_1;
    let x_6 : obj := proj[1] x_1;
    let x_7 : obj := appendAdd._main x_6 x_2;
    let x_8 : obj := ctor_2[Expr.Add] x_5 x_7;
    ret x_8
  Expr.Mul →
    let x_9 : obj := ctor_2[Expr.Add] x_1 x_2;
    ret x_9

def appendAdd (x_1 : obj) (x_2 : obj) : obj :=
  let x_3 : obj := appendAdd._main x_1 x_2;
  ret x_3

def appendMul._main (x_1 : obj) (x_2 : obj) : obj :=
  case x_1 : obj of
  Expr.Var →
    let x_3 : obj := ctor_3[Expr.Mul] x_1 x_2;
    ret x_3
  Expr.Val →
    let x_4 : obj := ctor_3[Expr.Mul] x_1 x_2;
    ret x_4
  Expr.Add →
    let x_5 : obj := ctor_3[Expr.Mul] x_1 x_2;
    ret x_5
  Expr.Mul →
    let x_6 : obj := proj[0] x_1;
    let x_7 : obj := proj[1] x_1;
    let x_8 : obj := appendMul._main x_7 x_2;
    let x_9 : obj := ctor_3[Expr.Mul] x_6 x_8;
    ret x_9

def appendMul (x_1 : obj) (x_2 : obj) : obj :=
  let x_3 : obj := appendMul._main x_1 x_2;
  ret x_3

def reassoc._main (x_1 : obj) : obj :=
  case x_1 : obj of
  Expr.Var →
    ret x_1
  Expr.Val →
    ret x_1
  Expr.Add →
    let x_2 : obj := proj[0] x_1;
    let x_3 : obj := proj[1] x_1;
    let x_4 : obj := reassoc._main x_2;
    let x_5 : obj := reassoc._main x_3;
    let x_6 : obj := appendAdd._main x_4 x_5;
    ret x_6
  Expr.Mul →
    let x_7 : obj := proj[0] x_1;
    let x_8 : obj := proj[1] x_1;
    let x_9 : obj := reassoc._main x_7;
    let x_10 : obj := reassoc._main x_8;
    let x_11 : obj := appendMul._main x_9 x_10;
    ret x_11

def reassoc (x_1 : obj) : obj :=
  let x_2 : obj := reassoc._main x_1;
  ret x_2

def constFolding._main (x_1 : obj) : obj :=
  case x_1 : obj of
  Expr.Var →
    ret x_1
  Expr.Val →
    ret x_1
  Expr.Add →
    let x_2 : obj := proj[0] x_1;
    let x_3 : obj := proj[1] x_1;
    let x_4 : obj := constFolding._main x_2;
    let x_5 : obj := constFolding._main x_3;
    case x_4 : obj of
    Expr.Var →
      let x_6 : obj := ctor_2[Expr.Add] x_4 x_5;
      ret x_6
    Expr.Val →
      let x_7 : obj := proj[0] x_4;
      case x_5 : obj of
      Expr.Var →
        let x_8 : obj := ctor_2[Expr.Add] x_4 x_5;
        ret x_8
      Expr.Val →
        let x_9 : obj := proj[0] x_5;
        let x_10 : obj := Nat.add x_7 x_9;
        let x_11 : obj := ctor_1[Expr.Val] x_10;
        ret x_11
      Expr.Add →
        let x_12 : obj := proj[0] x_5;
        let x_13 : obj := proj[1] x_5;
        block_14 (x_31 : obj) :=
          case x_13 : obj of
          Expr.Var →
            let x_32 : obj := ctor_2[Expr.Add] x_4 x_5;
            ret x_32
          Expr.Val →
            let x_33 : obj := proj[0] x_13;
            let x_34 : obj := Nat.add x_7 x_33;
            let x_35 : obj := ctor_1[Expr.Val] x_34;
            let x_36 : obj := ctor_2[Expr.Add] x_35 x_12;
            ret x_36
          Expr.Add →
            let x_37 : obj := ctor_2[Expr.Add] x_4 x_5;
            ret x_37
          Expr.Mul →
            let x_38 : obj := ctor_2[Expr.Add] x_4 x_5;
            ret x_38;
        case x_12 : obj of
        Expr.Var →
          let x_15 : obj := ctor_0[PUnit.unit];
          jmp block_14 x_15
        Expr.Val →
          let x_16 : obj := proj[0] x_12;
          block_17 (x_25 : obj) :=
            let x_26 : obj := Nat.add x_7 x_16;
            let x_27 : obj := ctor_1[Expr.Val] x_26;
            let x_28 : obj := ctor_2[Expr.Add] x_27 x_13;
            ret x_28;
          case x_13 : obj of
          Expr.Var →
            let x_18 : obj := ctor_0[PUnit.unit];
            jmp block_17 x_18
          Expr.Val →
            let x_19 : obj := proj[0] x_13;
            let x_20 : obj := Nat.add x_7 x_19;
            let x_21 : obj := ctor_1[Expr.Val] x_20;
            let x_22 : obj := ctor_2[Expr.Add] x_21 x_12;
            ret x_22
          Expr.Add →
            let x_23 : obj := ctor_0[PUnit.unit];
            jmp block_17 x_23
          Expr.Mul →
            let x_24 : obj := ctor_0[PUnit.unit];
            jmp block_17 x_24
        Expr.Add →
          let x_29 : obj := ctor_0[PUnit.unit];
          jmp block_14 x_29
        Expr.Mul →
          let x_30 : obj := ctor_0[PUnit.unit];
          jmp block_14 x_30
      Expr.Mul →
        let x_39 : obj := ctor_2[Expr.Add] x_4 x_5;
        ret x_39
    Expr.Add →
      let x_40 : obj := ctor_2[Expr.Add] x_4 x_5;
      ret x_40
    Expr.Mul →
      let x_41 : obj := ctor_2[Expr.Add] x_4 x_5;
      ret x_41
  Expr.Mul →
    let x_42 : obj := proj[0] x_1;
    let x_43 : obj := proj[1] x_1;
    let x_44 : obj := constFolding._main x_42;
    let x_45 : obj := constFolding._main x_43;
    case x_44 : obj of
    Expr.Var →
      let x_46 : obj := ctor_3[Expr.Mul] x_44 x_45;
      ret x_46
    Expr.Val →
      let x_47 : obj := proj[0] x_44;
      case x_45 : obj of
      Expr.Var →
        let x_48 : obj := ctor_3[Expr.Mul] x_44 x_45;
        ret x_48
      Expr.Val →
        let x_49 : obj := proj[0] x_45;
        let x_50 : obj := Nat.mul x_47 x_49;
        let x_51 : obj := ctor_1[Expr.Val] x_50;
        ret x_51
      Expr.Add →
        let x_52 : obj := ctor_3[Expr.Mul] x_44 x_45;
        ret x_52
      Expr.Mul →
        let x_53 : obj := proj[0] x_45;
        let x_54 : obj := proj[1] x_45;
        block_55 (x_72 : obj) :=
          case x_54 : obj of
          Expr.Var →
            let x_73 : obj := ctor_3[Expr.Mul] x_44 x_45;
            ret x_73
          Expr.Val →
            let x_74 : obj := proj[0] x_54;
            let x_75 : obj := Nat.mul x_47 x_74;
            let x_76 : obj := ctor_1[Expr.Val] x_75;
            let x_77 : obj := ctor_3[Expr.Mul] x_76 x_53;
            ret x_77
          Expr.Add →
            let x_78 : obj := ctor_3[Expr.Mul] x_44 x_45;
            ret x_78
          Expr.Mul →
            let x_79 : obj := ctor_3[Expr.Mul] x_44 x_45;
            ret x_79;
        case x_53 : obj of
        Expr.Var →
          let x_56 : obj := ctor_0[PUnit.unit];
          jmp block_55 x_56
        Expr.Val →
          let x_57 : obj := proj[0] x_53;
          block_58 (x_66 : obj) :=
            let x_67 : obj := Nat.mul x_47 x_57;
            let x_68 : obj := ctor_1[Expr.Val] x_67;
            let x_69 : obj := ctor_3[Expr.Mul] x_68 x_54;
            ret x_69;
          case x_54 : obj of
          Expr.Var →
            let x_59 : obj := ctor_0[PUnit.unit];
            jmp block_58 x_59
          Expr.Val →
            let x_60 : obj := proj[0] x_54;
            let x_61 : obj := Nat.mul x_47 x_60;
            let x_62 : obj := ctor_1[Expr.Val] x_61;
            let x_63 : obj := ctor_3[Expr.Mul] x_62 x_53;
            ret x_63
          Expr.Add →
            let x_64 : obj := ctor_0[PUnit.unit];
            jmp block_58 x_64
          Expr.Mul →
            let x_65 : obj := ctor_0[PUnit.unit];
            jmp block_58 x_65
        Expr.Add →
          let x_70 : obj := ctor_0[PUnit.unit];
          jmp block_55 x_70
        Expr.Mul →
          let x_71 : obj := ctor_0[PUnit.unit];
          jmp block_55 x_71
    Expr.Add →
      let x_80 : obj := ctor_3[Expr.Mul] x_44 x_45;
      ret x_80
    Expr.Mul →
      let x_81 : obj := ctor_3[Expr.Mul] x_44 x_45;
      ret x_81

def constFolding (x_1 : obj) : obj :=
  let x_2 : obj := constFolding._main x_1;
  ret x_2

def size._main (x_1 : obj) : obj :=
  case x_1 : obj of
  Expr.Var →
    let x_2 : obj := 1;
    ret x_2
  Expr.Val →
    let x_3 : obj := 1;
    ret x_3
  Expr.Add →
    let x_4 : obj := proj[0] x_1;
    let x_5 : obj := proj[1] x_1;
    let x_6 : obj := size._main x_4;
    let x_7 : obj := size._main x_5;
    let x_8 : obj := Nat.add x_6 x_7;
    let x_9 : obj := 1;
    let x_10 : obj := Nat.add x_8 x_9;
    ret x_10
  Expr.Mul →
    let x_11 : obj := proj[0] x_1;
    let x_12 : obj := proj[1] x_1;
    let x_13 : obj := size._main x_11;
    let x_14 : obj := size._main x_12;
    let x_15 : obj := Nat.add x_13 x_14;
    let x_16 : obj := 1;
    let x_17 : obj := Nat.add x_15 x_16;
    ret x_17

def size (x_1 : obj) : obj :=
  let x_2 : obj := size._main x_1;
  ret x_2

def toStringAux._main._closed_1 : obj :=
  let x_1 : obj := " + ";
  ret x_1
def toStringAux._main._closed_2 : obj :=
  let x_1 : obj := " * ";
  ret x_1
def toStringAux._main (x_1 : obj) (x_2 : obj) : obj :=
  case x_1 : obj of
  Expr.Var →
    let x_3 : obj := proj[0] x_1;
    let x_4 : obj := Array.HasRepr._rarg._closed_1;
    let x_5 : obj := String.append x_2 x_4;
    let x_6 : obj := Nat.repr x_3;
    let x_7 : obj := String.append x_5 x_6;
    ret x_7
  Expr.Val →
    let x_8 : obj := proj[0] x_1;
    let x_9 : obj := Nat.repr x_8;
    let x_10 : obj := String.append x_2 x_9;
    ret x_10
  Expr.Add →
    let x_11 : obj := proj[0] x_1;
    let x_12 : obj := proj[1] x_1;
    let x_13 : obj := Prod.HasRepr._rarg._closed_1;
    let x_14 : obj := String.append x_2 x_13;
    let x_15 : obj := toStringAux._main x_11 x_14;
    let x_16 : obj := toStringAux._main._closed_1;
    let x_17 : obj := String.append x_15 x_16;
    let x_18 : obj := toStringAux._main x_12 x_17;
    let x_19 : obj := Option.HasRepr._rarg._closed_3;
    let x_20 : obj := String.append x_18 x_19;
    ret x_20
  Expr.Mul →
    let x_21 : obj := proj[0] x_1;
    let x_22 : obj := proj[1] x_1;
    let x_23 : obj := Prod.HasRepr._rarg._closed_1;
    let x_24 : obj := String.append x_2 x_23;
    let x_25 : obj := toStringAux._main x_21 x_24;
    let x_26 : obj := toStringAux._main._closed_2;
    let x_27 : obj := String.append x_25 x_26;
    let x_28 : obj := toStringAux._main x_22 x_27;
    let x_29 : obj := Option.HasRepr._rarg._closed_3;
    let x_30 : obj := String.append x_28 x_29;
    ret x_30

def toStringAux (x_1 : obj) (x_2 : obj) : obj :=
  let x_3 : obj := toStringAux._main x_1 x_2;
  ret x_3

def eval._main (x_1 : obj) : obj :=
  case x_1 : obj of
  Expr.Var →
    let x_2 : obj := 0;
    ret x_2
  Expr.Val →
    let x_3 : obj := proj[0] x_1;
    ret x_3
  Expr.Add →
    let x_4 : obj := proj[0] x_1;
    let x_5 : obj := proj[1] x_1;
    let x_6 : obj := eval._main x_4;
    let x_7 : obj := eval._main x_5;
    let x_8 : obj := Nat.add x_6 x_7;
    ret x_8
  Expr.Mul →
    let x_9 : obj := proj[0] x_1;
    let x_10 : obj := proj[1] x_1;
    let x_11 : obj := eval._main x_9;
    let x_12 : obj := eval._main x_10;
    let x_13 : obj := Nat.mul x_11 x_12;
    ret x_13

def eval (x_1 : obj) : obj :=
  let x_2 : obj := eval._main x_1;
  ret x_2

def main (x_1 : obj) (x_2 : obj) : obj :=
  case x_1 : obj of
  List.nil →
    let x_3 : u32 := 1;
    let x_4 : obj := ctor_0[EStateM.Result.ok] x_3 x_2;
    ret x_4
  List.cons →
    let x_5 : obj := proj[0] x_1;
    let x_6 : obj := proj[1] x_1;
    case x_6 : obj of
    List.nil →
      let x_7 : obj := String.toNat x_5;
      let x_8 : obj := 1;
      let x_9 : obj := mkExpr._main x_7 x_8;
      let x_10 : obj := eval._main x_9;
      let x_11 : obj := reassoc._main x_9;
      let x_12 : obj := constFolding._main x_11;
      let x_13 : obj := eval._main x_12;
      let x_14 : obj := Nat.repr x_10;
      let x_15 : obj := String.Iterator.HasRepr._closed_2;
      let x_16 : obj := String.append x_14 x_15;
      let x_17 : obj := Nat.repr x_13;
      let x_18 : obj := String.append x_16 x_17;
      let x_19 : obj := IO.println._at.Lean.HasRepr.HasEval._spec_1 x_18 x_2;
      case x_19 : obj of
      EStateM.Result.ok →
        let x_20 : obj := proj[1] x_19;
        let x_21 : u32 := 0;
        let x_22 : obj := ctor_0[EStateM.Result.ok] x_21 x_20;
        ret x_22
      EStateM.Result.error →
        let x_23 : obj := proj[0] x_19;
        let x_24 : obj := proj[1] x_19;
        let x_25 : obj := ctor_1[EStateM.Result.error] x_23 x_24;
        ret x_25
    List.cons →
      let x_26 : u32 := 1;
      let x_27 : obj := ctor_0[EStateM.Result.ok] x_26 x_2;
      ret x_27