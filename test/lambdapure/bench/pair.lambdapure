

def fold._main (x_1 : obj) : obj :=
  case x_1 : obj of
  L.Nil →
    ret x_1
  L.Cons1 →
    let x_2 : obj := proj[0] x_1;
    let x_3 : obj := proj[1] x_1;
    let x_4 : obj := fold._main x_3;
    let x_5 : obj := ctor_1[L.Cons1] x_2 x_4;
    ret x_5
  L.Cons2 →
    let x_6 : obj := proj[0] x_1;
    let x_7 : obj := proj[1] x_1;
    let x_8 : obj := proj[2] x_1;
    let x_9 : obj := Nat.add x_6 x_7;
    let x_10 : obj := fold._main x_8;
    let x_11 : obj := ctor_1[L.Cons1] x_9 x_10;
    ret x_11

def fold (x_1 : obj) : obj :=
  let x_2 : obj := fold._main x_1;
  ret x_2