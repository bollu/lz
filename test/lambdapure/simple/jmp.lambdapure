
[init]
def Expr.constFolding.match_1._rarg (x_1 : obj) (x_2 : obj) (x_3 : obj) (x_4 : obj) (x_5 : obj) : obj :=
  case x_1 : obj of
  Expr.Val →
    let x_6 : obj := proj[0] x_1;
    case x_2 : obj of
    Expr.Val →
      let x_7 : obj := app x_5 x_1 x_2;
      ret x_7
    Expr.Add →
      let x_8 : obj := proj[0] x_2;
      let x_9 : obj := proj[1] x_2;
      block_10 (x_18 : obj) :=
        case x_9 : obj of
        Expr.Val →
          let x_19 : obj := proj[0] x_9;
          let x_20 : obj := app x_3 x_6 x_8 x_19;
          ret x_20
        Expr.Add →
          let x_21 : obj := app x_5 x_1 x_2;
          ret x_21
        Expr.Mul →
          let x_22 : obj := app x_5 x_1 x_2;
          ret x_22;
      case x_8 : obj of
      Expr.Val →
        let x_11 : obj := proj[0] x_8;
        case x_9 : obj of
        Expr.Val →
          let x_12 : obj := proj[0] x_9;
          let x_13 : obj := app x_3 x_6 x_8 x_12;
          ret x_13
        Expr.Add →
          let x_14 : obj := app x_4 x_6 x_11 x_9;
          ret x_14
        Expr.Mul →
          let x_15 : obj := app x_4 x_6 x_11 x_9;
          ret x_15
      Expr.Add →
        let x_16 : obj := ctor_0[PUnit.unit];
        jmp block_10 x_16
      Expr.Mul →
        let x_17 : obj := ctor_0[PUnit.unit];
        jmp block_10 x_17
    Expr.Mul →
      let x_23 : obj := app x_5 x_1 x_2;
      ret x_23
  Expr.Add →
    let x_24 : obj := app x_5 x_1 x_2;
    ret x_24
  Expr.Mul →
    let x_25 : obj := app x_5 x_1 x_2;
    ret x_25
def Expr.constFolding.match_1 (x_1 : ◾) : obj :=
  let x_2 : obj := pap Expr.constFolding.match_1._rarg;
  ret x_2
[init]
def Expr.constFolding.match_2._rarg (x_1 : obj) (x_2 : obj) (x_3 : obj) : obj :=
  case x_1 : obj of
  Expr.Val →
    let x_4 : obj := app x_3 x_1;
    ret x_4
  Expr.Add →
    let x_5 : obj := proj[0] x_1;
    let x_6 : obj := proj[1] x_1;
    let x_7 : obj := app x_2 x_5 x_6;
    ret x_7
  Expr.Mul →
    let x_8 : obj := app x_3 x_1;
    ret x_8
def Expr.constFolding.match_2 (x_1 : ◾) : obj :=
  let x_2 : obj := pap Expr.constFolding.match_2._rarg;
  ret x_2
[init]
def Expr.constFolding (x_1 : obj) : obj :=
  case x_1 : obj of
  Expr.Val →
    ret x_1
  Expr.Add →
    let x_2 : obj := proj[0] x_1;
    let x_3 : obj := proj[1] x_1;
    case x_2 : obj of
    Expr.Val →
      let x_4 : obj := proj[0] x_2;
      case x_3 : obj of
      Expr.Val →
        let x_5 : obj := ctor_1[Expr.Add] x_2 x_3;
        ret x_5
      Expr.Add →
        let x_6 : obj := proj[0] x_3;
        let x_7 : obj := proj[1] x_3;
        block_8 (x_22 : obj) :=
          case x_7 : obj of
          Expr.Val →
            let x_23 : obj := proj[0] x_7;
            let x_24 : obj := Nat.add x_4 x_23;
            let x_25 : obj := ctor_0[Expr.Val] x_24;
            let x_26 : obj := ctor_1[Expr.Add] x_25 x_6;
            ret x_26
          Expr.Add →
            let x_27 : obj := ctor_1[Expr.Add] x_2 x_3;
            ret x_27
          Expr.Mul →
            let x_28 : obj := ctor_1[Expr.Add] x_2 x_3;
            ret x_28;
        case x_6 : obj of
        Expr.Val →
          let x_9 : obj := proj[0] x_6;
          case x_7 : obj of
          Expr.Val →
            let x_10 : obj := proj[0] x_7;
            let x_11 : obj := Nat.add x_4 x_10;
            let x_12 : obj := ctor_0[Expr.Val] x_11;
            let x_13 : obj := ctor_1[Expr.Add] x_12 x_6;
            ret x_13
          Expr.Add →
            let x_14 : obj := Nat.add x_4 x_9;
            let x_15 : obj := ctor_0[Expr.Val] x_14;
            let x_16 : obj := ctor_1[Expr.Add] x_15 x_7;
            ret x_16
          Expr.Mul →
            let x_17 : obj := Nat.add x_4 x_9;
            let x_18 : obj := ctor_0[Expr.Val] x_17;
            let x_19 : obj := ctor_1[Expr.Add] x_18 x_7;
            ret x_19
        Expr.Add →
          let x_20 : obj := ctor_0[PUnit.unit];
          jmp block_8 x_20
        Expr.Mul →
          let x_21 : obj := ctor_0[PUnit.unit];
          jmp block_8 x_21
      Expr.Mul →
        let x_29 : obj := ctor_1[Expr.Add] x_2 x_3;
        ret x_29
    Expr.Add →
      let x_30 : obj := ctor_1[Expr.Add] x_2 x_3;
      ret x_30
    Expr.Mul →
      let x_31 : obj := ctor_1[Expr.Add] x_2 x_3;
      ret x_31
  Expr.Mul →
    ret x_1
