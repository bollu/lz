
[init]
def case.match_1._rarg (x_1 : obj) (x_2 : obj) (x_3 : obj) (x_4 : obj) : obj :=
  let x_5 : obj := 0;
  let x_6 : u8 := Nat.decEq x_1 x_5;
  case x_6 : obj of
  Bool.false →
    let x_7 : obj := 1;
    let x_8 : u8 := Nat.decEq x_1 x_7;
    case x_8 : obj of
    Bool.false →
      let x_9 : obj := app x_4 x_1;
      ret x_9
    Bool.true →
      let x_10 : obj := ctor_0[PUnit.unit];
      let x_11 : obj := app x_3 x_10;
      ret x_11
  Bool.true →
    let x_12 : obj := ctor_0[PUnit.unit];
    let x_13 : obj := app x_2 x_12;
    ret x_13
def case.match_1 (x_1 : ◾) : obj :=
  let x_2 : obj := pap case.match_1._rarg;
  ret x_2
[init]
def case (x_1 : obj) : obj :=
  let x_2 : obj := 0;
  let x_3 : u8 := Nat.decEq x_1 x_2;
  case x_3 : obj of
  Bool.false →
    let x_4 : obj := 1;
    let x_5 : u8 := Nat.decEq x_1 x_4;
    case x_5 : obj of
    Bool.false →
      let x_6 : obj := Nat.add x_1 x_4;
      ret x_6
    Bool.true →
      let x_7 : obj := 2;
      ret x_7
  Bool.true →
    let x_8 : obj := 1;
    ret x_8