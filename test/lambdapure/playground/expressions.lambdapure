

def evaLExpr._main (x_1 : obj) : obj :=
  case x_1 : obj of
  Expr.Val →
    let x_2 : obj := proj[0] x_1;
    ret x_2
  Expr.Add →
    let x_3 : obj := proj[0] x_1;
    let x_4 : obj := proj[1] x_1;
    let x_5 : obj := evaLExpr._main x_3;
    let x_6 : obj := evaLExpr._main x_4;
    let x_7 : obj := Nat.add x_5 x_6;
    ret x_7
  Expr.Mul →
    let x_8 : obj := 1;
    ret x_8

def evaLExpr (x_1 : obj) : obj :=
  let x_2 : obj := evaLExpr._main x_1;
  ret x_2

def oneplustwo._closed_1 : obj :=
  let x_1 : obj := 2;
  let x_2 : obj := ctor_0[Expr.Val] x_1;
  ret x_2
def oneplustwo._closed_2 : obj :=
  let x_1 : obj := 1;
  let x_2 : obj := ctor_0[Expr.Val] x_1;
  ret x_2
def oneplustwo._closed_3 : obj :=
  let x_1 : obj := oneplustwo._closed_1;
  let x_2 : obj := oneplustwo._closed_2;
  let x_3 : obj := ctor_1[Expr.Add] x_1 x_2;
  ret x_3
def oneplustwo._closed_4 : obj :=
  let x_1 : obj := oneplustwo._closed_3;
  let x_2 : obj := evaLExpr._main x_1;
  ret x_2
def oneplustwo : obj :=
  let x_1 : obj := oneplustwo._closed_4;
  ret x_1

def main (x_1 : obj) (x_2 : obj) : obj :=
  let x_3 : u32 := 0;
  let x_4 : obj := ctor_0[EStateM.Result.ok] x_3 x_2;
  ret x_4