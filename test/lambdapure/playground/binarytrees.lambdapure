

def Tree.Inhabited : obj :=
  let x_1 : obj := ctor_0[Tree.Nil];
  ret x_1

def make'._main._closed_1 : obj :=
  let x_1 : obj := ctor_0[Tree.Nil];
  let x_2 : obj := ctor_1[Tree.Node] x_1 x_1;
  ret x_2
def make'._main (x_1 : u32) (x_2 : u32) : obj :=
  let x_3 : u32 := 0;
  let x_4 : u8 := UInt32.decEq x_2 x_3;
  case x_4 : obj of
  Bool.false →
    let x_5 : u32 := 1;
    let x_6 : u32 := UInt32.sub x_2 x_5;
    let x_7 : obj := make'._main x_1 x_6;
    let x_8 : u32 := UInt32.add x_1 x_5;
    let x_9 : obj := make'._main x_8 x_6;
    let x_10 : obj := ctor_1[Tree.Node] x_7 x_9;
    ret x_10
  Bool.true →
    let x_11 : obj := make'._main._closed_1;
    ret x_11

def make' (x_1 : u32) (x_2 : u32) : obj :=
  let x_3 : obj := make'._main x_1 x_2;
  ret x_3

def make (x_1 : u32) : obj :=
  let x_2 : obj := make'._main x_1 x_1;
  ret x_2

def check._main (x_1 : obj) : u32 :=
  case x_1 : obj of
  Tree.Nil →
    let x_2 : u32 := 0;
    ret x_2
  Tree.Node →
    let x_3 : obj := proj[0] x_1;
    let x_4 : obj := proj[1] x_1;
    let x_5 : u32 := 1;
    let x_6 : u32 := check._main x_3;
    let x_7 : u32 := UInt32.add x_5 x_6;
    let x_8 : u32 := check._main x_4;
    let x_9 : u32 := UInt32.add x_7 x_8;
    ret x_9

def check (x_1 : obj) : u32 :=
  let x_2 : u32 := check._main x_1;
  ret x_2

def minN : obj :=
  let x_1 : obj := 4;
  ret x_1
