

def map._main (x_1 : obj) (x_2 : obj) : obj :=
  case x_2 : obj of
  L.Nil →
    ret x_2
  L.Cons →
    let x_3 : obj := proj[0] x_2;
    let x_4 : obj := proj[1] x_2;
    let x_5 : obj := app x_1 x_3;
    let x_6 : obj := map._main x_1 x_4;
    let x_7 : obj := ctor_1[L.Cons] x_5 x_6;
    ret x_7

def map (x_1 : obj) (x_2 : obj) : obj :=
  let x_3 : obj := map._main x_1 x_2;
  ret x_3

def t._main (x_1 : obj) : obj :=
  case x_1 : obj of
  Tree.Nil →
    ret x_1
  Tree.Node_2 →
    let x_2 : obj := proj[0] x_1;
    let x_3 : obj := proj[1] x_1;
    let x_4 : obj := t._main x_2;
    let x_5 : obj := t._main x_3;
    let x_6 : obj := ctor_1[Tree.Node_2] x_4 x_5;
    ret x_6
  Tree.Node_3 →
    let x_7 : obj := proj[0] x_1;
    let x_8 : obj := proj[1] x_1;
    let x_9 : obj := t._main x_7;
    let x_10 : obj := t._main x_8;
    let x_11 : obj := ctor_1[Tree.Node_2] x_9 x_10;
    ret x_11

def t (x_1 : obj) : obj :=
  let x_2 : obj := t._main x_1;
  ret x_2