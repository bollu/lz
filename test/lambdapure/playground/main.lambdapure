

def IO.print._at.main._spec_2 (x_1 : obj) (x_2 : obj) : obj :=
  let x_3 : obj := Nat.repr x_1;
  let x_4 : obj := IO.Prim.putStr x_3 x_2;
  ret x_4
def IO.println._at.main._spec_1 (x_1 : obj) (x_2 : obj) : obj :=
  let x_3 : obj := IO.print._at.main._spec_2 x_1 x_2;
  case x_3 : obj of
  EStateM.Result.ok →
    let x_4 : obj := proj[1] x_3;
    let x_5 : obj := IO.println._rarg._closed_1;
    let x_6 : obj := IO.Prim.putStr x_5 x_4;
    ret x_6
  EStateM.Result.error →
    let x_7 : obj := proj[0] x_3;
    let x_8 : obj := proj[1] x_3;
    let x_9 : obj := ctor_1[EStateM.Result.error] x_7 x_8;
    ret x_9
def main (x_1 : obj) (x_2 : obj) : obj :=
  let x_3 : obj := 0;
  let x_4 : obj := IO.println._at.main._spec_1 x_3 x_2;
  case x_4 : obj of
  EStateM.Result.ok →
    let x_5 : obj := proj[1] x_4;
    let x_6 : u32 := 0;
    let x_7 : obj := ctor_0[EStateM.Result.ok] x_6 x_5;
    ret x_7
  EStateM.Result.error →
    let x_8 : obj := proj[0] x_4;
    let x_9 : obj := proj[1] x_4;
    let x_10 : obj := ctor_1[EStateM.Result.error] x_8 x_9;
    ret x_10