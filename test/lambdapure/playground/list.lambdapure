

def map (x_1 : obj) (x_2 : obj) : obj :=
  case x_2 : obj of
  L.Nil →
    ret x_2
  L.Cons →
    let x_3 : obj := proj[0] x_2;
    let x_4 : obj := proj[1] x_2;
    let x_5 : obj := app x_1 x_3;
    let x_6 : obj := ctor_1[L.Cons] x_5 x_4;
    ret x_6

def add_one (x_1 : obj) : obj :=
  let x_2 : obj := 1;
  let x_3 : obj := Nat.add x_1 x_2;
  ret x_3